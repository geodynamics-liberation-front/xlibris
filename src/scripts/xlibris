#!/usr/bin/env python
# vim: set fileencoding=utf-8 :
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
import argparse
import logging
import operator
import os
import shutil
import subprocess
import sys
import traceback
import xlibris
import xlibris.xlibris_fs as xlfs
import xlibris.settings as xlsettings
import xlibris.xlibris_store as xlstore
import xlibris.xlibris_db as xldb
import xlibris.doi as doi

# The settings object
settings=None
# Setup a logger and formatter
name=os.path.basename(sys.argv[0])
LOG=logging.getLogger(name)
LOG.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(name)s %(funcName)s - %(levelname)s - %(message)s")

URL_SCHEMAS=["http:","https:","ftp:"]
DOI_SCHEMAS=["doi:","dx.doi.org","10."]
def guess_source(s):
    if os.path.exists(s) and os.path.isfile(s):
        return 'file'
    elif reduce(operator.or_,[s.startswith(schema) for schema in URL_SCHEMAS],0):
        return 'url'
    elif reduce(operator.or_,[s.startswith(schema) for schema in DOI_SCHEMAS],0):
        return 'doi'
    else:
        raise ValueError("Unknow source '%s'" % s)

def get_article(pdf,doi_number=None):
    if not doi_number:
        LOG.debug("Extracting DOI from %s",pdf)
        dois=doi.get_doi_from_pdf(pdf)
        if len(dois)==0:
            sys.stderr.write("Could not find DOI in PDF, manually enter DOI.\n")
            sys.stderr.write("DOI: ")
            doi_number=sys.stdin.readline().strip()
        elif len(dois)==1:
            LOG.debug("Found 1 DOI: %s"%dois[0])
            doi_number=dois[0]
        else:   
            LOG.debug("Got DOIs: %s"%dois)
            doi_number=dois[0]
            if settings.prompt_doi:
                sys.stderr.write("Multiple DOI found, select the correct DOI for this document.\n")
                for n,doi_candidate in enumerate(dois):
                    sys.stderr.write("[%3d] %s\n"%(n,doi_candidate))
                doi_ndx=-1
                while doi_ndx<0 or doi_ndx>=len(dois):
                    sys.stderr.write("Select DOI 0 to %d [0]: "%(len(doi)-1))
                    ndx_str=sys.stdin.readline().strip()
                    if ndx_str=='':
                        doi_ndx=0
                    else:
                        try:
                            doi_ndx=int(ndx_str)
                        except:
                            pass
                doi_number=dois[doi_ndx]
    LOG.debug("Using DOI: %s"%doi_number)

    LOG.debug("Getting CrossREF information")
    doi_xml=doi.get_doi_xml(doi_number)
    article=None
    try:
        article=doi.parse_doi_xml(doi_xml)
    except:
        t,v,tb=sys.exc_info()
        sys.stderr.write("Exception processing %s\n"%doi_number)
        sys.stderr.write("%s: %s\n"%(t.__name__,v))
        escaped_doi=doi_number.replace("/","\\\\")
        log_file=os.path.join(settings.log_dir,escaped_doi+'.log')
        xml_file=os.path.join(settings.log_dir,escaped_doi+'.xml')
        sys.stderr.write("Check in %s for details\n"%settings.log_dir)
        f=open(xml_file,'w')
        f.write(doi_xml.prettify())
        f.flush()
        f.close()
        f=open(log_file,'w')
        traceback.print_exception(t,v,tb,None,f)
        f.flush()
        f.close()
    return article

def info_pdf(args,settings):
    LOG.debug("Getting PDFs info")
    pdfs=args.pdf
    LOG.debug(": %s",pdfs)
    out=sys.stdout
    for pdf in pdfs:
        article=get_article(pdf)
        if article!=None:
            out.write("%s metadata:\n"%pdf)
            out.write("Article Title: %s\n"%article.title)
            out.write("Article DOI:   %s\n"%article.doi)
            for author in article.authors:
                out.write("Author:        %s, %s\n"%(author.surname,author.given_name))
            issue=article.issue
            journal=issue.journal
            out.write("Journal:       %s (%s)\n"%(journal.title,journal.abbreviation))  
            for media_type,issn in journal.issn.items():
                out.write("ISSN:          %s (%s)\n"%(issn,media_type))
            out.write("Volume:        %s\n"%issue.volume)
            out.write("Issue:         %s\n"%issue.issue)
            for  media_type,publication in issue.publications.items():
                out.write("Issue Pub:     %s - %s/%s/%s\n"%(media_type,publication.year,publication.month,publication.day))
            for  media_type,publication in article.publications.items():
                out.write("Article Pub:   %s - %s/%s/%s\n"%(media_type,publication.year,publication.month,publication.day))

def import_document(args,settings):
    LOG.debug("Import document")
    LOG.debug("Method: %s"%args.method)
    LOG.debug("Source(s): %s"%args.source)
    settings.db=xldb.XLibrisDB(settings.db_file)
    settings.store=xlstore.XLibrisStore(settings.db)
    for s in args.source:
        LOG.debug("Source: %s"%s)
        if args.method=="file":
            import_file(s, settings)
        elif args.method=="doi":
            import_doi(s, settings)
        elif args.method=="url":
            import_url(s, settings)
        else: # try to guess
            try:
                method=guess_source(s)
                if method=="file":
                    LOG.debug("Trying %s as a file"%s)
                    import_file(s, settings)
                elif method=="doi":
                    LOG.debug("Trying %s as a DOI"%s)
                    import_doi(s, settings)
                elif method=="url":
                    LOG.debug("Trying %s as a URL"%s)
                    import_url(s, settings)
            except ValueError:
                sys.stderr.write("Unable to figure out what '%s' is, skipping.\nTry %s --help\n"%(s,sys.argv[0]))
                LOG.exception("Unable to figure out what '%s' is, skipping",s)

def import_doi(doi):
    LOG.debug("Import DOI")
    LOG.debug("Importing: %s"%doi)

def import_url(url):
    LOG.debug("Import URL")
    LOG.debug("Importing: %s"%url)

def import_file(f,settings,doi=None):
    LOG.debug("Import File")
    LOG.debug("Importing: %s",f)
    article=get_article(f,doi)
    store=settings.store
    if article!=None:
        # Check for journal abbreviation
        LOG.debug("Looking for journal using ISSNs %s"%article.issue.journal.issn.values())
        store_journal=store.get_journal_from_issn(article.issue.journal.issn.values())
        if store_journal: 
            LOG.debug('Found journal "%s"'%store_journal.title)
            article.issue.journal=store_journal
        journal=article.issue.journal
        if journal.abbreviation=='':
            sys.stderr.write('Enter abbreviation for "%s":\n'%journal.title)
            journal.abbreviation=sys.stdin.readline().strip()
        ext=os.path.splitext(f)[1]
        filename=settings.format_filename(article)+ext
        LOG.debug("Formated filename: %s",filename)
        dest=os.path.abspath(os.path.join(settings.doc_dir,filename))
        LOG.debug("Destination: %s",dest)
        article.filename=filename
        if settings.move_file:
            LOG.debug("Moving %s to %s",f,dest)
            shutil.move(f,dest)
        else:
            LOG.debug("Copying %s to %s",f,dest)
            shutil.copy(f,dest)
        store.store_article(article)
        
def list_document(args,settings):
    LOG.debug("List documents")

def bibtex(args,settings):
    LOG.debug("Generate BIBTex")

def tag(args,settings):
    settings.db=xldb.XLibrisDB(settings.db_file)
    store=xlstore.XLibrisStore(settings.db)
    filename=os.path.basename(args.source)
    article=store.get_article_by_filename(filename)
    if article != None:
        for name in args.tag:
            t=xlstore.Tag(name)
            store.tag_article(article,t)
        

def mount(args,settings):
    LOG.debug("Mount filesystem")
    if args.mountpoint:
        mountpoint=args.mountpoint
    else:
        mountpoint=settings.mountpoint_dir
    LOG.debug("mountpoint: %s",mountpoint)
    LOG.debug("original sys.argv: %s",sys.argv)
    sys.argv=[sys.argv[0],mountpoint]+args.unknown
    LOG.debug("modified sys.argv: %s",sys.argv)
    db=xldb.XLibrisDB(settings.db_file)
    xls=xlstore.XLibrisStore(db)
    fs=xlfs.XLibrisFS(xls,settings)
    fs.parse(errex=1)
    fs.main()

def setup(args,settings):
    xlsettings.write_default(args.rc)
    editor=""
    try:
        editor=os.environ['EDITOR']
    except KeyError:
        sys.stderr.write("Default editor not set.\nSelect editor or [enter] to skip\n")
        sys.stderr.write("editor: ")
        editor=sys.stdin.readline().strip()
    if editor!="":
        subprocess.Popen([editor,args.rc]).wait()

    # Get create the directories
    xlsettings.create_dirs(args.rc)
    # Check the newly created settings
    try:
        xlsettings.check(args.rc)
    except xlsettings.SettingsException as e:
        print_setting_exception(e)

def check(args,settings):
    try:
        xlsettings.check(args.rc)
        sys.stdout.write("All settings look ok.\n")
    except xlsettings.SettingsException as e:
        print_setting_exception(e)

def print_setting_exception(e):
    sys.stderr.write("Encountered problems with setting file %s:\n"%e.value)
    for p in e.problems:
        sys.stderr.write('\t')
        sys.stderr.write(p)
        sys.stderr.write('\n')
    sys.stderr.write("Please correct the problems or run:\n\t%s setup\nto start with the default settings\n"%sys.argv[0])
    sys.exit(2)

if __name__ == "__main__":
#   import atexit
#   atexit.register(logExit)
    # Set up the screen handler for logging
    screen_handler=logging.StreamHandler()
    screen_handler.setFormatter(formatter)
    screen_handler.setLevel(logging.ERROR)
    LOG.addHandler(screen_handler)
    xlibris.LOG.addHandler(screen_handler)

    rcfile=os.path.expanduser(os.path.join('~','.xlibrisrc.py'))
    parser = argparse.ArgumentParser('xlibris')
    parser.add_argument('--rc',required=False,help='The initalization file to use',default=rcfile)
    parser.add_argument('-v',dest='verbose',action='store_true',help='Verbose output')
    parser.add_argument('--test', action='store_true', help=argparse.SUPPRESS)
    subparsers = parser.add_subparsers(help='The command to execute')

    parser_info = subparsers.add_parser('info', help="Print document information")
    parser_info.add_argument('source',help='PDF(s) to get information on',nargs='+')
    parser_info.set_defaults(cmd='info',func=info_pdf)

    parser_import = subparsers.add_parser('import', help='Import PDFs')
    import_group = parser_import.add_mutually_exclusive_group()
    import_group.set_defaults(method='guess')
    import_group.add_argument('-f',help='import source as a file',dest='method',action='store_const',const='file')
    import_group.add_argument('-d',help='Import source as a DOI',dest='method',action='store_const',const='doi')
    import_group.add_argument('-u',help='Import source as a url',dest='method',action='store_const',const='url')
    parser_import.add_argument('source',help='Document(s) to import.  -f file, -d DOI, -u url',nargs='+')
    parser_import.set_defaults(cmd='import',func=import_document)

    parser_list = subparsers.add_parser('list', help='List PDFs in the library')
    parser_list.set_defaults(cmd='list',func=list_document)

    parser_bibtex = subparsers.add_parser('bibtex', help='Generate bibTeX')
    parser_bibtex.set_defaults(cmd='bibtex',func=bibtex)

    parser_tag = subparsers.add_parser('tag', help='Tag one or more articles')
    parser_tag.add_argument('source',help='Document to tag')
    parser_tag.add_argument('tag',help='Tag to apply to the source',nargs='+')
    parser_tag.set_defaults(cmd='tag',func=tag)

    parser_mount = subparsers.add_parser('mount', help='Mount the xlibris filesystem')
    parser_mount.add_argument('mountpoint',help='Directory to mount',nargs='?')
    parser_mount.set_defaults(cmd='mount',func=mount)

    parser_setup = subparsers.add_parser('setup', help='Sets up the settings and directory structure')
    parser_setup.set_defaults(cmd='setup',func=setup)
    
    parser_check = subparsers.add_parser('check', help='Checks the settings and directory structure')
    parser_check.set_defaults(cmd='check',func=check)

    args,unknown=parser.parse_known_args()

    if args.cmd=='mount':
        args.unknown=unknown
    else:
        args=parser.parse_args()

    if args.verbose:
        LOG.setLevel(logging.DEBUG)
        xlibris.LOG.setLevel(logging.DEBUG)
        screen_handler.setLevel(logging.DEBUG)

    settings=None
    # setup
    if args.cmd == "setup":
        args.func(args,settings)
        sys.exit(0)
    elif args.cmd == "check":
        args.func(args,settings)
        sys.exit(0)

    # Read the settings file
    try:
        settings=xlsettings.get_settings(args.rc)
    except xlsettings.SettingsException as e:
        if args.cmd!="setup":
            print_setting_exception(e)

    if args.test:
        print("sys.argv = %s"%sys.argv)
        print("args = %s"%args)
        print("settings = %s"%settings.__dict__)
        sys.exit(0)

    # Convert all strings to UNICODE
    for k,v in args.__dict__.iteritems():
       if type(args.__dict__[k]) == str:
           args.__dict__[k]=unicode(v,'utf-8') 
    
    # Call the approprate function
    args.func(args,settings)
